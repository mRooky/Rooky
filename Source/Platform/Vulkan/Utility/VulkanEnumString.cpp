/*
 * VulkanEnumString.cpp
 *
 *  Created on: Jan 22, 2019
 *      Author: rookyma
 */

#include <Utility/VulkanEnumString.h>
#include <cassert>

namespace Vulkan
{

#define VK_CASE(x) case VK_##x : return #x;

const char* AttachmentLoadOpString(VkAttachmentLoadOp input)
{
	switch (input)
	{
	VK_CASE(ATTACHMENT_LOAD_OP_LOAD);
	VK_CASE(ATTACHMENT_LOAD_OP_CLEAR);
	VK_CASE(ATTACHMENT_LOAD_OP_DONT_CARE);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* AttachmentStoreOpString(VkAttachmentStoreOp input)
{
	switch (input)
	{
	VK_CASE(ATTACHMENT_STORE_OP_STORE);
	VK_CASE(ATTACHMENT_STORE_OP_DONT_CARE);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* BlendFactorString(VkBlendFactor input)
{
	switch (input)
	{
	VK_CASE(BLEND_FACTOR_ZERO);
	VK_CASE(BLEND_FACTOR_ONE);
	VK_CASE(BLEND_FACTOR_SRC_COLOR);
	VK_CASE(BLEND_FACTOR_ONE_MINUS_SRC_COLOR);
	VK_CASE(BLEND_FACTOR_DST_COLOR);
	VK_CASE(BLEND_FACTOR_ONE_MINUS_DST_COLOR);
	VK_CASE(BLEND_FACTOR_SRC_ALPHA);
	VK_CASE(BLEND_FACTOR_ONE_MINUS_SRC_ALPHA);
	VK_CASE(BLEND_FACTOR_DST_ALPHA);
	VK_CASE(BLEND_FACTOR_ONE_MINUS_DST_ALPHA);
	VK_CASE(BLEND_FACTOR_CONSTANT_COLOR);
	VK_CASE(BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR);
	VK_CASE(BLEND_FACTOR_CONSTANT_ALPHA);
	VK_CASE(BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA);
	VK_CASE(BLEND_FACTOR_SRC_ALPHA_SATURATE);
	VK_CASE(BLEND_FACTOR_SRC1_COLOR);
	VK_CASE(BLEND_FACTOR_ONE_MINUS_SRC1_COLOR);
	VK_CASE(BLEND_FACTOR_SRC1_ALPHA);
	VK_CASE(BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* BlendOpString(VkBlendOp input)
{
	switch (input)
	{
	VK_CASE(BLEND_OP_ADD);
	VK_CASE(BLEND_OP_SUBTRACT);
	VK_CASE(BLEND_OP_REVERSE_SUBTRACT);
	VK_CASE(BLEND_OP_MIN);
	VK_CASE(BLEND_OP_MAX);
	VK_CASE(BLEND_OP_ZERO_EXT);
	VK_CASE(BLEND_OP_SRC_EXT);
	VK_CASE(BLEND_OP_DST_EXT);
	VK_CASE(BLEND_OP_SRC_OVER_EXT);
	VK_CASE(BLEND_OP_DST_OVER_EXT);
	VK_CASE(BLEND_OP_SRC_IN_EXT);
	VK_CASE(BLEND_OP_DST_IN_EXT);
	VK_CASE(BLEND_OP_SRC_OUT_EXT);
	VK_CASE(BLEND_OP_DST_OUT_EXT);
	VK_CASE(BLEND_OP_SRC_ATOP_EXT);
	VK_CASE(BLEND_OP_DST_ATOP_EXT);
	VK_CASE(BLEND_OP_XOR_EXT);
	VK_CASE(BLEND_OP_MULTIPLY_EXT);
	VK_CASE(BLEND_OP_SCREEN_EXT);
	VK_CASE(BLEND_OP_OVERLAY_EXT);
	VK_CASE(BLEND_OP_DARKEN_EXT);
	VK_CASE(BLEND_OP_LIGHTEN_EXT);
	VK_CASE(BLEND_OP_COLORDODGE_EXT);
	VK_CASE(BLEND_OP_COLORBURN_EXT);
	VK_CASE(BLEND_OP_HARDLIGHT_EXT);
	VK_CASE(BLEND_OP_SOFTLIGHT_EXT);
	VK_CASE(BLEND_OP_DIFFERENCE_EXT);
	VK_CASE(BLEND_OP_EXCLUSION_EXT);
	VK_CASE(BLEND_OP_INVERT_EXT);
	VK_CASE(BLEND_OP_INVERT_RGB_EXT);
	VK_CASE(BLEND_OP_LINEARDODGE_EXT);
	VK_CASE(BLEND_OP_LINEARBURN_EXT);
	VK_CASE(BLEND_OP_VIVIDLIGHT_EXT);
	VK_CASE(BLEND_OP_LINEARLIGHT_EXT);
	VK_CASE(BLEND_OP_PINLIGHT_EXT);
	VK_CASE(BLEND_OP_HARDMIX_EXT);
	VK_CASE(BLEND_OP_HSL_HUE_EXT);
	VK_CASE(BLEND_OP_HSL_SATURATION_EXT);
	VK_CASE(BLEND_OP_HSL_COLOR_EXT);
	VK_CASE(BLEND_OP_HSL_LUMINOSITY_EXT);
	VK_CASE(BLEND_OP_PLUS_EXT);
	VK_CASE(BLEND_OP_PLUS_CLAMPED_EXT);
	VK_CASE(BLEND_OP_PLUS_CLAMPED_ALPHA_EXT);
	VK_CASE(BLEND_OP_PLUS_DARKER_EXT);
	VK_CASE(BLEND_OP_MINUS_EXT);
	VK_CASE(BLEND_OP_MINUS_CLAMPED_EXT);
	VK_CASE(BLEND_OP_CONTRAST_EXT);
	VK_CASE(BLEND_OP_INVERT_OVG_EXT);
	VK_CASE(BLEND_OP_RED_EXT);
	VK_CASE(BLEND_OP_GREEN_EXT);
	VK_CASE(BLEND_OP_BLUE_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* BlendOverlapEXTString(VkBlendOverlapEXT input)
{
	switch (input)
	{
	VK_CASE(BLEND_OVERLAP_UNCORRELATED_EXT);
	VK_CASE(BLEND_OVERLAP_DISJOINT_EXT);
	VK_CASE(BLEND_OVERLAP_CONJOINT_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* BorderColorString(VkBorderColor input)
{
	switch (input)
	{
	VK_CASE(BORDER_COLOR_FLOAT_TRANSPARENT_BLACK);
	VK_CASE(BORDER_COLOR_INT_TRANSPARENT_BLACK);
	VK_CASE(BORDER_COLOR_FLOAT_OPAQUE_BLACK);
	VK_CASE(BORDER_COLOR_INT_OPAQUE_BLACK);
	VK_CASE(BORDER_COLOR_FLOAT_OPAQUE_WHITE);
	VK_CASE(BORDER_COLOR_INT_OPAQUE_WHITE);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ChromaLocationString(VkChromaLocation input)
{
	switch (input)
	{
	VK_CASE(CHROMA_LOCATION_COSITED_EVEN);
	VK_CASE(CHROMA_LOCATION_MIDPOINT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ColorSpaceKHRString(VkColorSpaceKHR input)
{
	switch (input)
	{
	VK_CASE(COLORSPACE_SRGB_NONLINEAR_KHR);
	VK_CASE(COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT);
	VK_CASE(COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT);
	VK_CASE(COLOR_SPACE_DCI_P3_LINEAR_EXT);
	VK_CASE(COLOR_SPACE_DCI_P3_NONLINEAR_EXT);
	VK_CASE(COLOR_SPACE_BT709_LINEAR_EXT);
	VK_CASE(COLOR_SPACE_BT709_NONLINEAR_EXT);
	VK_CASE(COLOR_SPACE_BT2020_LINEAR_EXT);
	VK_CASE(COLOR_SPACE_HDR10_ST2084_EXT);
	VK_CASE(COLOR_SPACE_DOLBYVISION_EXT);
	VK_CASE(COLOR_SPACE_HDR10_HLG_EXT);
	VK_CASE(COLOR_SPACE_ADOBERGB_LINEAR_EXT);
	VK_CASE(COLOR_SPACE_ADOBERGB_NONLINEAR_EXT);
	VK_CASE(COLOR_SPACE_PASS_THROUGH_EXT);
	VK_CASE(COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* CommandBufferLevelString(VkCommandBufferLevel input)
{
	switch (input)
	{
	VK_CASE(COMMAND_BUFFER_LEVEL_PRIMARY);
	VK_CASE(COMMAND_BUFFER_LEVEL_SECONDARY);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* CompareOpString(VkCompareOp input)
{
	switch (input)
	{
	VK_CASE(COMPARE_OP_NEVER);
	VK_CASE(COMPARE_OP_LESS);
	VK_CASE(COMPARE_OP_EQUAL);
	VK_CASE(COMPARE_OP_LESS_OR_EQUAL);
	VK_CASE(COMPARE_OP_GREATER);
	VK_CASE(COMPARE_OP_NOT_EQUAL);
	VK_CASE(COMPARE_OP_GREATER_OR_EQUAL);
	VK_CASE(COMPARE_OP_ALWAYS);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ComponentSwizzleString(VkComponentSwizzle input)
{
	switch (input)
	{
	VK_CASE(COMPONENT_SWIZZLE_IDENTITY);
	VK_CASE(COMPONENT_SWIZZLE_ZERO);
	VK_CASE(COMPONENT_SWIZZLE_ONE);
	VK_CASE(COMPONENT_SWIZZLE_R);
	VK_CASE(COMPONENT_SWIZZLE_G);
	VK_CASE(COMPONENT_SWIZZLE_B);
	VK_CASE(COMPONENT_SWIZZLE_A);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ConservativeRasterizationModeEXTString(VkConservativeRasterizationModeEXT input)
{
	switch (input)
	{
	VK_CASE(CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT);
	VK_CASE(CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT);
	VK_CASE(CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* CoverageModulationModeNVString(VkCoverageModulationModeNV input)
{
	switch (input)
	{
	VK_CASE(COVERAGE_MODULATION_MODE_NONE_NV);
	VK_CASE(COVERAGE_MODULATION_MODE_RGB_NV);
	VK_CASE(COVERAGE_MODULATION_MODE_ALPHA_NV);
	VK_CASE(COVERAGE_MODULATION_MODE_RGBA_NV);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* DebugReportObjectTypeEXTString(VkDebugReportObjectTypeEXT input)
{
	switch (input)
	{
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT);
	VK_CASE(DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* DescriptorTypeString(VkDescriptorType input)
{
	switch (input)
	{
	VK_CASE(DESCRIPTOR_TYPE_SAMPLER);
	VK_CASE(DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER);
	VK_CASE(DESCRIPTOR_TYPE_SAMPLED_IMAGE);
	VK_CASE(DESCRIPTOR_TYPE_STORAGE_IMAGE);
	VK_CASE(DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER);
	VK_CASE(DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER);
	VK_CASE(DESCRIPTOR_TYPE_UNIFORM_BUFFER);
	VK_CASE(DESCRIPTOR_TYPE_STORAGE_BUFFER);
	VK_CASE(DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC);
	VK_CASE(DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC);
	VK_CASE(DESCRIPTOR_TYPE_INPUT_ATTACHMENT);
//	VK_CASE(DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* DescriptorUpdateTemplateTypeString(VkDescriptorUpdateTemplateType input)
{
	switch (input)
	{
	VK_CASE(DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET);
	VK_CASE(DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* DeviceEventTypeEXTString(VkDeviceEventTypeEXT input)
{
	switch (input)
	{
	VK_CASE(DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* DiscardRectangleModeEXTString(VkDiscardRectangleModeEXT input)
{
	switch (input)
	{
	VK_CASE(DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT);
	VK_CASE(DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* DisplayEventTypeEXTString(VkDisplayEventTypeEXT input)
{
	switch (input)
	{
	VK_CASE(DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* DisplayPowerStateEXTString(VkDisplayPowerStateEXT input)
{
	switch (input)
	{
	VK_CASE(DISPLAY_POWER_STATE_OFF_EXT);
	VK_CASE(DISPLAY_POWER_STATE_SUSPEND_EXT);
	VK_CASE(DISPLAY_POWER_STATE_ON_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* DynamicStateString(VkDynamicState input)
{
	switch (input)
	{
	VK_CASE(DYNAMIC_STATE_VIEWPORT);
	VK_CASE(DYNAMIC_STATE_SCISSOR);
	VK_CASE(DYNAMIC_STATE_LINE_WIDTH);
	VK_CASE(DYNAMIC_STATE_DEPTH_BIAS);
	VK_CASE(DYNAMIC_STATE_BLEND_CONSTANTS);
	VK_CASE(DYNAMIC_STATE_DEPTH_BOUNDS);
	VK_CASE(DYNAMIC_STATE_STENCIL_COMPARE_MASK);
	VK_CASE(DYNAMIC_STATE_STENCIL_WRITE_MASK);
	VK_CASE(DYNAMIC_STATE_STENCIL_REFERENCE);
	VK_CASE(DYNAMIC_STATE_VIEWPORT_W_SCALING_NV);
	VK_CASE(DYNAMIC_STATE_DISCARD_RECTANGLE_EXT);
	VK_CASE(DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* FilterString(VkFilter input)
{
	switch (input)
	{
	VK_CASE(FILTER_NEAREST);
	VK_CASE(FILTER_LINEAR);
	VK_CASE(FILTER_CUBIC_IMG);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* FormatString(VkFormat input)
{
	switch (input)
	{
	VK_CASE(FORMAT_UNDEFINED);
	VK_CASE(FORMAT_R4G4_UNORM_PACK8);
	VK_CASE(FORMAT_R4G4B4A4_UNORM_PACK16);
	VK_CASE(FORMAT_B4G4R4A4_UNORM_PACK16);
	VK_CASE(FORMAT_R5G6B5_UNORM_PACK16);
	VK_CASE(FORMAT_B5G6R5_UNORM_PACK16);
	VK_CASE(FORMAT_R5G5B5A1_UNORM_PACK16);
	VK_CASE(FORMAT_B5G5R5A1_UNORM_PACK16);
	VK_CASE(FORMAT_A1R5G5B5_UNORM_PACK16);
	VK_CASE(FORMAT_R8_UNORM);
	VK_CASE(FORMAT_R8_SNORM);
	VK_CASE(FORMAT_R8_USCALED);
	VK_CASE(FORMAT_R8_SSCALED);
	VK_CASE(FORMAT_R8_UINT);
	VK_CASE(FORMAT_R8_SINT);
	VK_CASE(FORMAT_R8_SRGB);
	VK_CASE(FORMAT_R8G8_UNORM);
	VK_CASE(FORMAT_R8G8_SNORM);
	VK_CASE(FORMAT_R8G8_USCALED);
	VK_CASE(FORMAT_R8G8_SSCALED);
	VK_CASE(FORMAT_R8G8_UINT);
	VK_CASE(FORMAT_R8G8_SINT);
	VK_CASE(FORMAT_R8G8_SRGB);
	VK_CASE(FORMAT_R8G8B8_UNORM);
	VK_CASE(FORMAT_R8G8B8_SNORM);
	VK_CASE(FORMAT_R8G8B8_USCALED);
	VK_CASE(FORMAT_R8G8B8_SSCALED);
	VK_CASE(FORMAT_R8G8B8_UINT);
	VK_CASE(FORMAT_R8G8B8_SINT);
	VK_CASE(FORMAT_R8G8B8_SRGB);
	VK_CASE(FORMAT_B8G8R8_UNORM);
	VK_CASE(FORMAT_B8G8R8_SNORM);
	VK_CASE(FORMAT_B8G8R8_USCALED);
	VK_CASE(FORMAT_B8G8R8_SSCALED);
	VK_CASE(FORMAT_B8G8R8_UINT);
	VK_CASE(FORMAT_B8G8R8_SINT);
	VK_CASE(FORMAT_B8G8R8_SRGB);
	VK_CASE(FORMAT_R8G8B8A8_UNORM);
	VK_CASE(FORMAT_R8G8B8A8_SNORM);
	VK_CASE(FORMAT_R8G8B8A8_USCALED);
	VK_CASE(FORMAT_R8G8B8A8_SSCALED);
	VK_CASE(FORMAT_R8G8B8A8_UINT);
	VK_CASE(FORMAT_R8G8B8A8_SINT);
	VK_CASE(FORMAT_R8G8B8A8_SRGB);
	VK_CASE(FORMAT_B8G8R8A8_UNORM);
	VK_CASE(FORMAT_B8G8R8A8_SNORM);
	VK_CASE(FORMAT_B8G8R8A8_USCALED);
	VK_CASE(FORMAT_B8G8R8A8_SSCALED);
	VK_CASE(FORMAT_B8G8R8A8_UINT);
	VK_CASE(FORMAT_B8G8R8A8_SINT);
	VK_CASE(FORMAT_B8G8R8A8_SRGB);
	VK_CASE(FORMAT_A8B8G8R8_UNORM_PACK32);
	VK_CASE(FORMAT_A8B8G8R8_SNORM_PACK32);
	VK_CASE(FORMAT_A8B8G8R8_USCALED_PACK32);
	VK_CASE(FORMAT_A8B8G8R8_SSCALED_PACK32);
	VK_CASE(FORMAT_A8B8G8R8_UINT_PACK32);
	VK_CASE(FORMAT_A8B8G8R8_SINT_PACK32);
	VK_CASE(FORMAT_A8B8G8R8_SRGB_PACK32);
	VK_CASE(FORMAT_A2R10G10B10_UNORM_PACK32);
	VK_CASE(FORMAT_A2R10G10B10_SNORM_PACK32);
	VK_CASE(FORMAT_A2R10G10B10_USCALED_PACK32);
	VK_CASE(FORMAT_A2R10G10B10_SSCALED_PACK32);
	VK_CASE(FORMAT_A2R10G10B10_UINT_PACK32);
	VK_CASE(FORMAT_A2R10G10B10_SINT_PACK32);
	VK_CASE(FORMAT_A2B10G10R10_UNORM_PACK32);
	VK_CASE(FORMAT_A2B10G10R10_SNORM_PACK32);
	VK_CASE(FORMAT_A2B10G10R10_USCALED_PACK32);
	VK_CASE(FORMAT_A2B10G10R10_SSCALED_PACK32);
	VK_CASE(FORMAT_A2B10G10R10_UINT_PACK32);
	VK_CASE(FORMAT_A2B10G10R10_SINT_PACK32);
	VK_CASE(FORMAT_R16_UNORM);
	VK_CASE(FORMAT_R16_SNORM);
	VK_CASE(FORMAT_R16_USCALED);
	VK_CASE(FORMAT_R16_SSCALED);
	VK_CASE(FORMAT_R16_UINT);
	VK_CASE(FORMAT_R16_SINT);
	VK_CASE(FORMAT_R16_SFLOAT);
	VK_CASE(FORMAT_R16G16_UNORM);
	VK_CASE(FORMAT_R16G16_SNORM);
	VK_CASE(FORMAT_R16G16_USCALED);
	VK_CASE(FORMAT_R16G16_SSCALED);
	VK_CASE(FORMAT_R16G16_UINT);
	VK_CASE(FORMAT_R16G16_SINT);
	VK_CASE(FORMAT_R16G16_SFLOAT);
	VK_CASE(FORMAT_R16G16B16_UNORM);
	VK_CASE(FORMAT_R16G16B16_SNORM);
	VK_CASE(FORMAT_R16G16B16_USCALED);
	VK_CASE(FORMAT_R16G16B16_SSCALED);
	VK_CASE(FORMAT_R16G16B16_UINT);
	VK_CASE(FORMAT_R16G16B16_SINT);
	VK_CASE(FORMAT_R16G16B16_SFLOAT);
	VK_CASE(FORMAT_R16G16B16A16_UNORM);
	VK_CASE(FORMAT_R16G16B16A16_SNORM);
	VK_CASE(FORMAT_R16G16B16A16_USCALED);
	VK_CASE(FORMAT_R16G16B16A16_SSCALED);
	VK_CASE(FORMAT_R16G16B16A16_UINT);
	VK_CASE(FORMAT_R16G16B16A16_SINT);
	VK_CASE(FORMAT_R16G16B16A16_SFLOAT);
	VK_CASE(FORMAT_R32_UINT);
	VK_CASE(FORMAT_R32_SINT);
	VK_CASE(FORMAT_R32_SFLOAT);
	VK_CASE(FORMAT_R32G32_UINT);
	VK_CASE(FORMAT_R32G32_SINT);
	VK_CASE(FORMAT_R32G32_SFLOAT);
	VK_CASE(FORMAT_R32G32B32_UINT);
	VK_CASE(FORMAT_R32G32B32_SINT);
	VK_CASE(FORMAT_R32G32B32_SFLOAT);
	VK_CASE(FORMAT_R32G32B32A32_UINT);
	VK_CASE(FORMAT_R32G32B32A32_SINT);
	VK_CASE(FORMAT_R32G32B32A32_SFLOAT);
	VK_CASE(FORMAT_R64_UINT);
	VK_CASE(FORMAT_R64_SINT);
	VK_CASE(FORMAT_R64_SFLOAT);
	VK_CASE(FORMAT_R64G64_UINT);
	VK_CASE(FORMAT_R64G64_SINT);
	VK_CASE(FORMAT_R64G64_SFLOAT);
	VK_CASE(FORMAT_R64G64B64_UINT);
	VK_CASE(FORMAT_R64G64B64_SINT);
	VK_CASE(FORMAT_R64G64B64_SFLOAT);
	VK_CASE(FORMAT_R64G64B64A64_UINT);
	VK_CASE(FORMAT_R64G64B64A64_SINT);
	VK_CASE(FORMAT_R64G64B64A64_SFLOAT);
	VK_CASE(FORMAT_B10G11R11_UFLOAT_PACK32);
	VK_CASE(FORMAT_E5B9G9R9_UFLOAT_PACK32);
	VK_CASE(FORMAT_D16_UNORM);
	VK_CASE(FORMAT_X8_D24_UNORM_PACK32);
	VK_CASE(FORMAT_D32_SFLOAT);
	VK_CASE(FORMAT_S8_UINT);
	VK_CASE(FORMAT_D16_UNORM_S8_UINT);
	VK_CASE(FORMAT_D24_UNORM_S8_UINT);
	VK_CASE(FORMAT_D32_SFLOAT_S8_UINT);
	VK_CASE(FORMAT_BC1_RGB_UNORM_BLOCK);
	VK_CASE(FORMAT_BC1_RGB_SRGB_BLOCK);
	VK_CASE(FORMAT_BC1_RGBA_UNORM_BLOCK);
	VK_CASE(FORMAT_BC1_RGBA_SRGB_BLOCK);
	VK_CASE(FORMAT_BC2_UNORM_BLOCK);
	VK_CASE(FORMAT_BC2_SRGB_BLOCK);
	VK_CASE(FORMAT_BC3_UNORM_BLOCK);
	VK_CASE(FORMAT_BC3_SRGB_BLOCK);
	VK_CASE(FORMAT_BC4_UNORM_BLOCK);
	VK_CASE(FORMAT_BC4_SNORM_BLOCK);
	VK_CASE(FORMAT_BC5_UNORM_BLOCK);
	VK_CASE(FORMAT_BC5_SNORM_BLOCK);
	VK_CASE(FORMAT_BC6H_UFLOAT_BLOCK);
	VK_CASE(FORMAT_BC6H_SFLOAT_BLOCK);
	VK_CASE(FORMAT_BC7_UNORM_BLOCK);
	VK_CASE(FORMAT_BC7_SRGB_BLOCK);
	VK_CASE(FORMAT_ETC2_R8G8B8_UNORM_BLOCK);
	VK_CASE(FORMAT_ETC2_R8G8B8_SRGB_BLOCK);
	VK_CASE(FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK);
	VK_CASE(FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK);
	VK_CASE(FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK);
	VK_CASE(FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK);
	VK_CASE(FORMAT_EAC_R11_UNORM_BLOCK);
	VK_CASE(FORMAT_EAC_R11_SNORM_BLOCK);
	VK_CASE(FORMAT_EAC_R11G11_UNORM_BLOCK);
	VK_CASE(FORMAT_EAC_R11G11_SNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_4x4_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_4x4_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_5x4_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_5x4_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_5x5_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_5x5_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_6x5_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_6x5_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_6x6_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_6x6_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_8x5_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_8x5_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_8x6_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_8x6_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_8x8_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_8x8_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_10x5_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_10x5_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_10x6_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_10x6_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_10x8_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_10x8_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_10x10_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_10x10_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_12x10_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_12x10_SRGB_BLOCK);
	VK_CASE(FORMAT_ASTC_12x12_UNORM_BLOCK);
	VK_CASE(FORMAT_ASTC_12x12_SRGB_BLOCK);
	VK_CASE(FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG);
	VK_CASE(FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG);
	VK_CASE(FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG);
	VK_CASE(FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG);
	VK_CASE(FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG);
	VK_CASE(FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG);
	VK_CASE(FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG);
	VK_CASE(FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG);
	VK_CASE(FORMAT_G8B8G8R8_422_UNORM);
	VK_CASE(FORMAT_B8G8R8G8_422_UNORM);
	VK_CASE(FORMAT_G8_B8_R8_3PLANE_420_UNORM);
	VK_CASE(FORMAT_G8_B8R8_2PLANE_420_UNORM);
	VK_CASE(FORMAT_G8_B8_R8_3PLANE_422_UNORM);
	VK_CASE(FORMAT_G8_B8R8_2PLANE_422_UNORM);
	VK_CASE(FORMAT_G8_B8_R8_3PLANE_444_UNORM);
	VK_CASE(FORMAT_R10X6_UNORM_PACK16);
	VK_CASE(FORMAT_R10X6G10X6_UNORM_2PACK16);
	VK_CASE(FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16);
	VK_CASE(FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16);
	VK_CASE(FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16);
	VK_CASE(FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16);
	VK_CASE(FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16);
	VK_CASE(FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16);
	VK_CASE(FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16);
	VK_CASE(FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16);
	VK_CASE(FORMAT_R12X4_UNORM_PACK16);
	VK_CASE(FORMAT_R12X4G12X4_UNORM_2PACK16);
	VK_CASE(FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16);
	VK_CASE(FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16);
	VK_CASE(FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16);
	VK_CASE(FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16);
	VK_CASE(FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16);
	VK_CASE(FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16);
	VK_CASE(FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16);
	VK_CASE(FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16);
	VK_CASE(FORMAT_G16B16G16R16_422_UNORM);
	VK_CASE(FORMAT_B16G16R16G16_422_UNORM);
	VK_CASE(FORMAT_G16_B16_R16_3PLANE_420_UNORM);
	VK_CASE(FORMAT_G16_B16R16_2PLANE_420_UNORM);
	VK_CASE(FORMAT_G16_B16_R16_3PLANE_422_UNORM);
	VK_CASE(FORMAT_G16_B16R16_2PLANE_422_UNORM);
	VK_CASE(FORMAT_G16_B16_R16_3PLANE_444_UNORM);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* FrontFaceString(VkFrontFace input)
{
	switch (input)
	{
	VK_CASE(FRONT_FACE_COUNTER_CLOCKWISE);
	VK_CASE(FRONT_FACE_CLOCKWISE);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ImageLayoutString(VkImageLayout input)
{
	switch (input)
	{
	VK_CASE(IMAGE_LAYOUT_UNDEFINED);
	VK_CASE(IMAGE_LAYOUT_GENERAL);
	VK_CASE(IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL);
	VK_CASE(IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL);
	VK_CASE(IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL);
	VK_CASE(IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);
	VK_CASE(IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL);
	VK_CASE(IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL);
	VK_CASE(IMAGE_LAYOUT_PREINITIALIZED);
	VK_CASE(IMAGE_LAYOUT_PRESENT_SRC_KHR);
	VK_CASE(IMAGE_LAYOUT_SHARED_PRESENT_KHR);
	VK_CASE(IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL);
	VK_CASE(IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ImageTilingString(VkImageTiling input)
{
	switch (input)
	{
	VK_CASE(IMAGE_TILING_OPTIMAL);
	VK_CASE(IMAGE_TILING_LINEAR);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ImageTypeString(VkImageType input)
{
	switch (input)
	{
	VK_CASE(IMAGE_TYPE_1D);
	VK_CASE(IMAGE_TYPE_2D);
	VK_CASE(IMAGE_TYPE_3D);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ImageViewTypeString(VkImageViewType input)
{
	switch (input)
	{
	VK_CASE(IMAGE_VIEW_TYPE_1D);
	VK_CASE(IMAGE_VIEW_TYPE_2D);
	VK_CASE(IMAGE_VIEW_TYPE_3D);
	VK_CASE(IMAGE_VIEW_TYPE_CUBE);
	VK_CASE(IMAGE_VIEW_TYPE_1D_ARRAY);
	VK_CASE(IMAGE_VIEW_TYPE_2D_ARRAY);
	VK_CASE(IMAGE_VIEW_TYPE_CUBE_ARRAY);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* IndexTypeString(VkIndexType input)
{
	switch (input)
	{
	VK_CASE(INDEX_TYPE_UINT16);
	VK_CASE(INDEX_TYPE_UINT32);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* IndirectCommandsTokenTypeNVXString(VkIndirectCommandsTokenTypeNVX input)
{
	switch (input)
	{
	VK_CASE(INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX);
	VK_CASE(INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX);
	VK_CASE(INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX);
	VK_CASE(INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX);
	VK_CASE(INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX);
	VK_CASE(INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX);
	VK_CASE(INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX);
	VK_CASE(INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* InternalAllocationTypeString(VkInternalAllocationType input)
{
	switch (input)
	{
	VK_CASE(INTERNAL_ALLOCATION_TYPE_EXECUTABLE);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* LogicOpString(VkLogicOp input)
{
	switch (input)
	{
	VK_CASE(LOGIC_OP_CLEAR);
	VK_CASE(LOGIC_OP_AND);
	VK_CASE(LOGIC_OP_AND_REVERSE);
	VK_CASE(LOGIC_OP_COPY);
	VK_CASE(LOGIC_OP_AND_INVERTED);
	VK_CASE(LOGIC_OP_NO_OP);
	VK_CASE(LOGIC_OP_XOR);
	VK_CASE(LOGIC_OP_OR);
	VK_CASE(LOGIC_OP_NOR);
	VK_CASE(LOGIC_OP_EQUIVALENT);
	VK_CASE(LOGIC_OP_INVERT);
	VK_CASE(LOGIC_OP_OR_REVERSE);
	VK_CASE(LOGIC_OP_COPY_INVERTED);
	VK_CASE(LOGIC_OP_OR_INVERTED);
	VK_CASE(LOGIC_OP_NAND);
	VK_CASE(LOGIC_OP_SET);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ObjectEntryTypeNVXString(VkObjectEntryTypeNVX input)
{
	switch (input)
	{
	VK_CASE(OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX);
	VK_CASE(OBJECT_ENTRY_TYPE_PIPELINE_NVX);
	VK_CASE(OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX);
	VK_CASE(OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX);
	VK_CASE(OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ObjectTypeString(VkObjectType input)
{
	switch (input)
	{
	VK_CASE(OBJECT_TYPE_UNKNOWN);
	VK_CASE(OBJECT_TYPE_INSTANCE);
	VK_CASE(OBJECT_TYPE_PHYSICAL_DEVICE);
	VK_CASE(OBJECT_TYPE_DEVICE);
	VK_CASE(OBJECT_TYPE_QUEUE);
	VK_CASE(OBJECT_TYPE_SEMAPHORE);
	VK_CASE(OBJECT_TYPE_COMMAND_BUFFER);
	VK_CASE(OBJECT_TYPE_FENCE);
	VK_CASE(OBJECT_TYPE_DEVICE_MEMORY);
	VK_CASE(OBJECT_TYPE_BUFFER);
	VK_CASE(OBJECT_TYPE_IMAGE);
	VK_CASE(OBJECT_TYPE_EVENT);
	VK_CASE(OBJECT_TYPE_QUERY_POOL);
	VK_CASE(OBJECT_TYPE_BUFFER_VIEW);
	VK_CASE(OBJECT_TYPE_IMAGE_VIEW);
	VK_CASE(OBJECT_TYPE_SHADER_MODULE);
	VK_CASE(OBJECT_TYPE_PIPELINE_CACHE);
	VK_CASE(OBJECT_TYPE_PIPELINE_LAYOUT);
	VK_CASE(OBJECT_TYPE_RENDER_PASS);
	VK_CASE(OBJECT_TYPE_PIPELINE);
	VK_CASE(OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT);
	VK_CASE(OBJECT_TYPE_SAMPLER);
	VK_CASE(OBJECT_TYPE_DESCRIPTOR_POOL);
	VK_CASE(OBJECT_TYPE_DESCRIPTOR_SET);
	VK_CASE(OBJECT_TYPE_FRAMEBUFFER);
	VK_CASE(OBJECT_TYPE_COMMAND_POOL);
	VK_CASE(OBJECT_TYPE_SURFACE_KHR);
	VK_CASE(OBJECT_TYPE_SWAPCHAIN_KHR);
	VK_CASE(OBJECT_TYPE_DISPLAY_KHR);
	VK_CASE(OBJECT_TYPE_DISPLAY_MODE_KHR);
	VK_CASE(OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT);
	VK_CASE(OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE);
	VK_CASE(OBJECT_TYPE_OBJECT_TABLE_NVX);
	VK_CASE(OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX);
	VK_CASE(OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT);
	VK_CASE(OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION);
	VK_CASE(OBJECT_TYPE_VALIDATION_CACHE_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* PhysicalDeviceTypeString(VkPhysicalDeviceType input)
{
	switch (input)
	{
	VK_CASE(PHYSICAL_DEVICE_TYPE_OTHER);
	VK_CASE(PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU);
	VK_CASE(PHYSICAL_DEVICE_TYPE_DISCRETE_GPU);
	VK_CASE(PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU);
	VK_CASE(PHYSICAL_DEVICE_TYPE_CPU);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* PipelineBindPointString(VkPipelineBindPoint input)
{
	switch (input)
	{
	VK_CASE(PIPELINE_BIND_POINT_GRAPHICS);
	VK_CASE(PIPELINE_BIND_POINT_COMPUTE);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* PipelineCacheHeaderVersionString(VkPipelineCacheHeaderVersion input)
{
	switch (input)
	{
	VK_CASE(PIPELINE_CACHE_HEADER_VERSION_ONE);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* PointClippingBehaviorString(VkPointClippingBehavior input)
{
	switch (input)
	{
	VK_CASE(POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES);
	VK_CASE(POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* PolygonModeString(VkPolygonMode input)
{
	switch (input)
	{
	VK_CASE(POLYGON_MODE_FILL);
	VK_CASE(POLYGON_MODE_LINE);
	VK_CASE(POLYGON_MODE_POINT);
	VK_CASE(POLYGON_MODE_FILL_RECTANGLE_NV);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* PresentModeKHRString(VkPresentModeKHR input)
{
	switch (input)
	{
	VK_CASE(PRESENT_MODE_IMMEDIATE_KHR);
	VK_CASE(PRESENT_MODE_MAILBOX_KHR);
	VK_CASE(PRESENT_MODE_FIFO_KHR);
	VK_CASE(PRESENT_MODE_FIFO_RELAXED_KHR);
	VK_CASE(PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR);
	VK_CASE(PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* PrimitiveTopologyString(VkPrimitiveTopology input)
{
	switch (input)
	{
	VK_CASE(PRIMITIVE_TOPOLOGY_POINT_LIST);
	VK_CASE(PRIMITIVE_TOPOLOGY_LINE_LIST);
	VK_CASE(PRIMITIVE_TOPOLOGY_LINE_STRIP);
	VK_CASE(PRIMITIVE_TOPOLOGY_TRIANGLE_LIST);
	VK_CASE(PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP);
	VK_CASE(PRIMITIVE_TOPOLOGY_TRIANGLE_FAN);
	VK_CASE(PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY);
	VK_CASE(PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY);
	VK_CASE(PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY);
	VK_CASE(PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY);
	VK_CASE(PRIMITIVE_TOPOLOGY_PATCH_LIST);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* QueryTypeString(VkQueryType input)
{
	switch (input)
	{
	VK_CASE(QUERY_TYPE_OCCLUSION);
	VK_CASE(QUERY_TYPE_PIPELINE_STATISTICS);
	VK_CASE(QUERY_TYPE_TIMESTAMP);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* QueueGlobalPriorityEXTString(VkQueueGlobalPriorityEXT input)
{
	switch (input)
	{
	VK_CASE(QUEUE_GLOBAL_PRIORITY_LOW_EXT);
	VK_CASE(QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT);
	VK_CASE(QUEUE_GLOBAL_PRIORITY_HIGH_EXT);
	VK_CASE(QUEUE_GLOBAL_PRIORITY_REALTIME_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* RasterizationOrderAMDString(VkRasterizationOrderAMD input)
{
	switch (input)
	{
	VK_CASE(RASTERIZATION_ORDER_STRICT_AMD);
	VK_CASE(RASTERIZATION_ORDER_RELAXED_AMD);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ResultString(VkResult input)
{
	switch (input)
	{
	VK_CASE(ERROR_NOT_PERMITTED_EXT);
	VK_CASE(ERROR_FRAGMENTATION_EXT);
	VK_CASE(ERROR_INVALID_EXTERNAL_HANDLE);
	VK_CASE(ERROR_OUT_OF_POOL_MEMORY);
	VK_CASE(ERROR_INVALID_SHADER_NV);
	VK_CASE(ERROR_VALIDATION_FAILED_EXT);
	VK_CASE(ERROR_INCOMPATIBLE_DISPLAY_KHR);
	VK_CASE(ERROR_OUT_OF_DATE_KHR);
	VK_CASE(ERROR_NATIVE_WINDOW_IN_USE_KHR);
	VK_CASE(ERROR_SURFACE_LOST_KHR);
	VK_CASE(ERROR_FRAGMENTED_POOL);
	VK_CASE(ERROR_FORMAT_NOT_SUPPORTED);
	VK_CASE(ERROR_TOO_MANY_OBJECTS);
	VK_CASE(ERROR_INCOMPATIBLE_DRIVER);
	VK_CASE(ERROR_FEATURE_NOT_PRESENT);
	VK_CASE(ERROR_EXTENSION_NOT_PRESENT);
	VK_CASE(ERROR_LAYER_NOT_PRESENT);
	VK_CASE(ERROR_MEMORY_MAP_FAILED);
	VK_CASE(ERROR_DEVICE_LOST);
	VK_CASE(ERROR_INITIALIZATION_FAILED);
	VK_CASE(ERROR_OUT_OF_DEVICE_MEMORY);
	VK_CASE(ERROR_OUT_OF_HOST_MEMORY);
	VK_CASE(SUCCESS);
	VK_CASE(NOT_READY);
	VK_CASE(TIMEOUT);
	VK_CASE(EVENT_SET);
	VK_CASE(EVENT_RESET);
	VK_CASE(INCOMPLETE);
	VK_CASE(SUBOPTIMAL_KHR);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* SamplerAddressModeString(VkSamplerAddressMode input)
{
	switch (input)
	{
	VK_CASE(SAMPLER_ADDRESS_MODE_REPEAT);
	VK_CASE(SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT);
	VK_CASE(SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE);
	VK_CASE(SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER);
	VK_CASE(SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* SamplerMipmapModeString(VkSamplerMipmapMode input)
{
	switch (input)
	{
	VK_CASE(SAMPLER_MIPMAP_MODE_NEAREST);
	VK_CASE(SAMPLER_MIPMAP_MODE_LINEAR);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* SamplerReductionModeEXTString(VkSamplerReductionModeEXT input)
{
	switch (input)
	{
	VK_CASE(SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT);
	VK_CASE(SAMPLER_REDUCTION_MODE_MIN_EXT);
	VK_CASE(SAMPLER_REDUCTION_MODE_MAX_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* SamplerYcbcrModelConversionString(VkSamplerYcbcrModelConversion input)
{
	switch (input)
	{
	VK_CASE(SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY);
	VK_CASE(SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY);
	VK_CASE(SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709);
	VK_CASE(SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601);
	VK_CASE(SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* SamplerYcbcrRangeString(VkSamplerYcbcrRange input)
{
	switch (input)
	{
	VK_CASE(SAMPLER_YCBCR_RANGE_ITU_FULL);
	VK_CASE(SAMPLER_YCBCR_RANGE_ITU_NARROW);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ShaderInfoTypeAMDString(VkShaderInfoTypeAMD input)
{
	switch (input)
	{
	VK_CASE(SHADER_INFO_TYPE_STATISTICS_AMD);
	VK_CASE(SHADER_INFO_TYPE_BINARY_AMD);
	VK_CASE(SHADER_INFO_TYPE_DISASSEMBLY_AMD);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* SharingModeString(VkSharingMode input)
{
	switch (input)
	{
	VK_CASE(SHARING_MODE_EXCLUSIVE);
	VK_CASE(SHARING_MODE_CONCURRENT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* StencilOpString(VkStencilOp input)
{
	switch (input)
	{
	VK_CASE(STENCIL_OP_KEEP);
	VK_CASE(STENCIL_OP_ZERO);
	VK_CASE(STENCIL_OP_REPLACE);
	VK_CASE(STENCIL_OP_INCREMENT_AND_CLAMP);
	VK_CASE(STENCIL_OP_DECREMENT_AND_CLAMP);
	VK_CASE(STENCIL_OP_INVERT);
	VK_CASE(STENCIL_OP_INCREMENT_AND_WRAP);
	VK_CASE(STENCIL_OP_DECREMENT_AND_WRAP);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* StructureTypeString(VkStructureType input)
{
	switch (input)
	{
	VK_CASE(STRUCTURE_TYPE_APPLICATION_INFO);
	VK_CASE(STRUCTURE_TYPE_INSTANCE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_DEVICE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_SUBMIT_INFO);
	VK_CASE(STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO);
	VK_CASE(STRUCTURE_TYPE_MAPPED_MEMORY_RANGE);
	VK_CASE(STRUCTURE_TYPE_BIND_SPARSE_INFO);
	VK_CASE(STRUCTURE_TYPE_FENCE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_EVENT_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_BUFFER_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_IMAGE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_SAMPLER_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO);
	VK_CASE(STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET);
	VK_CASE(STRUCTURE_TYPE_COPY_DESCRIPTOR_SET);
	VK_CASE(STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO);
	VK_CASE(STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO);
	VK_CASE(STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO);
	VK_CASE(STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO);
	VK_CASE(STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER);
	VK_CASE(STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER);
	VK_CASE(STRUCTURE_TYPE_MEMORY_BARRIER);
	VK_CASE(STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_PRESENT_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD);
	VK_CASE(STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD);
	VK_CASE(STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2);
	VK_CASE(STRUCTURE_TYPE_FORMAT_PROPERTIES_2);
	VK_CASE(STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2);
	VK_CASE(STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2);
	VK_CASE(STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2);
	VK_CASE(STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO);
	VK_CASE(STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO);
	VK_CASE(STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO);
	VK_CASE(STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO);
	VK_CASE(STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO);
	VK_CASE(STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR);
	VK_CASE(STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO);
	VK_CASE(STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO);
	VK_CASE(STRUCTURE_TYPE_VALIDATION_FLAGS_EXT);
	VK_CASE(STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES);
//	VK_CASE(STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT);
//	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO);
	VK_CASE(STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO);
	VK_CASE(STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO);
	VK_CASE(STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR);
	VK_CASE(STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR);
	VK_CASE(STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO);
	VK_CASE(STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR);
	VK_CASE(STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT);
	VK_CASE(STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES);
	VK_CASE(STRUCTURE_TYPE_PRESENT_REGIONS_KHR);
	VK_CASE(STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX);
	VK_CASE(STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX);
	VK_CASE(STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX);
	VK_CASE(STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX);
	VK_CASE(STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX);
	VK_CASE(STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT);
	VK_CASE(STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_HDR_METADATA_EXT);
	VK_CASE(STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR);
	VK_CASE(STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR);
	VK_CASE(STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR);
	VK_CASE(STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR);
	VK_CASE(STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR);
	VK_CASE(STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_SUBPASS_END_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO);
	VK_CASE(STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR);
	VK_CASE(STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR);
	VK_CASE(STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES);
	VK_CASE(STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR);
	VK_CASE(STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR);
	VK_CASE(STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR);
	VK_CASE(STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR);
	VK_CASE(STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR);
	VK_CASE(STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK);
	VK_CASE(STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK);
	VK_CASE(STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS);
	VK_CASE(STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO);
	VK_CASE(STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT);
	VK_CASE(STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT);
	VK_CASE(STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID);
	VK_CASE(STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID);
	VK_CASE(STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID);
	VK_CASE(STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID);
	VK_CASE(STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID);
	VK_CASE(STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT);
	VK_CASE(STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT);
//	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT);
//	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT);
//	VK_CASE(STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT);
//	VK_CASE(STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT);
	VK_CASE(STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT);
	VK_CASE(STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2);
	VK_CASE(STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2);
	VK_CASE(STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2);
	VK_CASE(STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2);
	VK_CASE(STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2);
	VK_CASE(STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2);
	VK_CASE(STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV);
	VK_CASE(STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO);
	VK_CASE(STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO);
	VK_CASE(STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO);
	VK_CASE(STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES);
	VK_CASE(STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO);
	VK_CASE(STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO);
	VK_CASE(STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT);
	VK_CASE(STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES);
	VK_CASE(STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT);
	VK_CASE(STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR);
	VK_CASE(STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT);
	VK_CASE(STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD);
	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT);
	VK_CASE(STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT);
//	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT);
	VK_CASE(STRUCTURE_TYPE_CHECKPOINT_DATA_NV);
	VK_CASE(STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV);
//	VK_CASE(STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* SubpassContentsString(VkSubpassContents input)
{
	switch (input)
	{
	VK_CASE(SUBPASS_CONTENTS_INLINE);
	VK_CASE(SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* SystemAllocationScopeString(VkSystemAllocationScope input)
{
	switch (input)
	{
	VK_CASE(SYSTEM_ALLOCATION_SCOPE_COMMAND);
	VK_CASE(SYSTEM_ALLOCATION_SCOPE_OBJECT);
	VK_CASE(SYSTEM_ALLOCATION_SCOPE_CACHE);
	VK_CASE(SYSTEM_ALLOCATION_SCOPE_DEVICE);
	VK_CASE(SYSTEM_ALLOCATION_SCOPE_INSTANCE);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* TessellationDomainOriginString(VkTessellationDomainOrigin input)
{
	switch (input)
	{
	VK_CASE(TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT);
	VK_CASE(TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ValidationCacheHeaderVersionEXTString(VkValidationCacheHeaderVersionEXT input)
{
	switch (input)
	{
	VK_CASE(VALIDATION_CACHE_HEADER_VERSION_ONE_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ValidationCheckEXTString(VkValidationCheckEXT input)
{
	switch (input)
	{
	VK_CASE(VALIDATION_CHECK_ALL_EXT);
	VK_CASE(VALIDATION_CHECK_SHADERS_EXT);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* VendorIdString(VkVendorId input)
{
	switch (input)
	{
	VK_CASE(VENDOR_ID_VIV);
	VK_CASE(VENDOR_ID_VSI);
	VK_CASE(VENDOR_ID_KAZAN);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* VertexInputRateString(VkVertexInputRate input)
{
	switch (input)
	{
	VK_CASE(VERTEX_INPUT_RATE_VERTEX);
	VK_CASE(VERTEX_INPUT_RATE_INSTANCE);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

const char* ViewportCoordinateSwizzleNVString(VkViewportCoordinateSwizzleNV input)
{
	switch (input)
	{
	VK_CASE(VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV);
	VK_CASE(VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV);
	VK_CASE(VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV);
	VK_CASE(VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV);
	VK_CASE(VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV);
	VK_CASE(VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV);
	VK_CASE(VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV);
	VK_CASE(VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV);
	default:
		assert(false);
		return ("Undefined Enum Value!");
	}
}

#undef VK_CASE

} /* namespace Vulkan */
